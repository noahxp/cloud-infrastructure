AWSTemplateFormatVersion: "2010-09-09"

Description:
  AMIInfo

Resources:
###################
# AMI INFO Function
###################
  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          
          //A sample Lambda function that looks up the latest AMI ID for a given region and architecture.

          // Map instance architectures to an AMI name pattern

          var archToAMINamePattern = {
              "PV64": "amzn-ami-pv*x86_64-ebs",
              "HVM64": "amzn-ami-hvm*x86_64-gp2",
              "HVMG2": "amzn-ami-graphics-hvm*x86_64-ebs*",
              "ECS": "amzn-ami-*amazon-ecs-optimized"
          };

          var aws = require("aws-sdk");
          
          exports.handler = function(event, context) {
          
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              
              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  sendResponse(event, context, "SUCCESS");
                  return;
              }
          
              var responseStatus = "FAILED";
              var responseData = {};
          
              var ec2 = new aws.EC2({region: event.ResourceProperties.Region});
              var describeImagesParams = {
                  Filters: [{ Name: "name", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],
                  Owners: [event.ResourceProperties.Architecture == "HVMG2" ? "679593333241" : "amazon"]
              };
          
              // Get AMI IDs with the specified name pattern and owner

              ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {
                  if (err) {
                      responseData = {Error: "DescribeImages call failed"};
                      console.log(responseData.Error + ":\n", err);
                  }
                  else {
                      var images = describeImagesResult.Images;
                      // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.
                      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });
                      for (var j = 0; j < images.length; j++) {
                          if (isBeta(images[j].Name)) continue;
                          responseStatus = "SUCCESS";
                          responseData["Id"] = images[j].ImageId;
                          break;
                      }
                  }
                  sendResponse(event, context, responseStatus, responseData);
              });
          };

          // Check if the image is a beta or rc image. The Lambda function won't return any of those images.

          function isBeta(imageName) {
              return imageName.toLowerCase().indexOf("beta") > -1 || imageName.toLowerCase().indexOf(".rc") > -1;
          }


          // Send response to the pre-signed S3 URL 

          function sendResponse(event, context, responseStatus, responseData) {
          
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });
          
              console.log("RESPONSE BODY:\n", responseBody);
          
              var https = require("https");
              var url = require("url");
          
              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };
          
              console.log("SENDING RESPONSE...\n");
          
              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
          
              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
            
              // write data to request body
              request.write(responseBody);
              request.end();
          }      

      Handler: "index.handler"
      Runtime: nodejs6.10
      Description: "Query the latest ECS AMI for Cloudformation template"
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Tags:
        - Key: custom:cloudformation:purpose
          Value: AMIInfo



  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - ecs:*
            Resource: "*"


  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      Region: !Ref "AWS::Region"
      # Architecture: HVM64
      Architecture: ECS

######################
# Outputs
######################
Outputs:
  StackName:
    Value:
      !Ref AWS::StackName

  AmiId:
    Value:
      !GetAtt AMIInfo.Id
    Description: AMI ID  
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-AMIInfoId
          - StackName: !Ref AWS::StackName
  LambdaExecutionRoleArn:
    Value:
      !GetAtt LambdaExecutionRole.Arn
    Description: LambdaExecutionRole Arn
    # Export:
    #   Name: 
    #     "Fn::Sub": 
    #       - ${StackName}-AMIInfoId
    #       - StackName: !Ref AWS::StackName