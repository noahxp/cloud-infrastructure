AWSTemplateFormatVersion: '2010-09-09'
Description: 'sns to slack'

# environment type & bash parameters
Parameters:
  ParentStack:
    Type: String
    Description: '(*)Parent VPC Stack Name'

  EnvType:
    Type: String
    Description: '(*)Environment Type for this Stack.'
    ConstraintDescription: 'must specify prod, stag or dev.'
    Default: 'dev'
    AllowedValues:
      - 'prod'
      - 'stag'
      - 'dev'


Resources:
  ##### security group for sns 2 slack #####
  Sns2SlackSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Sns2SlackSecurityGroup'
      # no rules.
      # SecurityGroupIngress:
      #   -
      #     IpProtocol: 'tcp'
      #     FromPort: '80'
      #     ToPort: '80'
      #     CidrIp: '0.0.0.0/0'
      #   -
      #     IpProtocol: 'tcp'
      #     FromPort: '443'
      #     ToPort: '443'
      #     CidrIp: '0.0.0.0/0'
      Tags:
        -
          Key: Name
          Value: !Sub '${EnvType}-Sns2SlackSecurityGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentStack}-${EnvType}-VPC'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # RoleName: !Sub '${AWS::StackName}-${EnvType}-EC2Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        -
          PolicyName: !Sub '${AWS::StackName}-${EnvType}-LambdaExecutionRole'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'

  sns2slackFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: >-
          'use strict';

          var https = require('https');
          var util = require('util');

          var SLACK_WEB_HOOK_URL = process.env.WEB_HOOK_PATH;

          exports.handler = function(event, context) {
              let message = "<no message>";
              let subject = "<no subject>";
              if (typeof event === "undefined" || typeof event.Records === "undefined" || typeof event.Records[0].Sns === "undefined"){
                subject = JSON.stringify(event);
                message = JSON.stringify(context);
              } else {
                subject = event.Records[0].Sns.Subject;
                message = event.Records[0].Sns.Message;
              }
              let severity = "good";

              /*
              let postData = {
                  "channel": "#aws-sns",
                  "username": "AWS SNS via Lamda :: DevQa Cloud",
                  "text": "*" + subject + "*",
                  "icon_emoji": ":aws:"
              };
              */
              let postData = {
                  "username": "AWS SNS",
                  "text": subject
              };


              let dangerMessages = [
                  "Exception","exception",
                  "Error","error",
                  "Aborted","aborted",
                  "Failed", "failed",
                  "not authorized",
                  "Unsuccessful","unsuccessful",
                  "do not have permission"
                ];

              let warningMessages = [
                  "Warning","warning",
                  "Pending","pending",
                  "Removed","removed",
                  "Rollback","rollback",
                  "Delete","delete",
                  "Adding instance "
                ];

              for(let item in dangerMessages) {
                  if (message.indexOf(dangerMessages[item]) != -1) {
                      severity = "danger";
                      break;
                  }
              }

              // Only check for warning messages if necessary
              if (severity == "good") {
                  for(let item in warningMessages) {
                      if (message.indexOf(warningMessages[item]) != -1) {
                          severity = "warning";
                          break;
                      }
                  }
              }

              // http body
              postData.attachments = [
                  {
                      "color": severity,
                      "text": message
                  }
              ];

              // http header (options)
              let options = {
                  method: 'POST',
                  hostname: 'hooks.slack.com',
                  port: 443,
                  path: SLACK_WEB_HOOK_URL
              };

              let req = https.request(options, function(res) {
                res.setEncoding('utf8');
                res.on('data', function (chunk) {
                  context.done(null);
                });
              });

              req.on('error', function(e) {
                console.log('problem with request: ' + e.message);
              });

              req.write(util.format("%j", postData));
              req.end();
          };


      # FunctionName: 'lambda-sns2slack'
      Description: 'sns to slack Definition'
      # DeadLetterConfig:
      #   DeadLetterConfig
      Environment:
        Variables:
          WEB_HOOK_PATH: '/services/T0EGFGB5J/B5MGGP60Y/LihgfSvIDw0dYuMVXCkGc0Dw'
      Runtime: 'nodejs6.10'
      Handler: 'index.handler'
      # KmsKeyArn: String
      # defautl memory size is 128mb
      MemorySize: 128
      # default timeout is 3 seconds
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      # # if don't has nat-subnet , don't define vpc config , it's will be no-vpc
      # VpcConfig:
      #   SecurityGroupIds:
      #     - !Ref Sns2SlackSecurityGroup
      #   # recommand subnet is on nat-subnet
      #   SubnetIds:
      #     - 'Fn::ImportValue': !Sub '${ParentStack}-${EnvType}-PublicSubnetA'
      #     - 'Fn::ImportValue': !Sub '${ParentStack}-${EnvType}-PublicSubnetB'

  sns2SlackTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: 'sns to slack topic'
      Subscription:
        - Endpoint: !GetAtt sns2slackFunction.Arn
          Protocol: 'lambda'

  # ApplicationDeployerLambdaInvokePermission:
  lambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt sns2slackFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref sns2SlackTopic

  # sns2SlackSubscription:
  #   Type: 'AWS::SNS::Subscription'
  #   Properties:
  #     Endpoint: !GetAtt sns2slackFunction.Arn
  #     Protocol: 'lambda'
  #     TopicArn: !Ref sns2SlackTopic

Outputs:
  sns2SlackTopic:
    Value: !Ref sns2SlackTopic
    Export:
      Name: !Sub '${ParentStack}-${EnvType}-sns2slack'
