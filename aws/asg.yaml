
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AutoScalingGroup & LaunchConfiguration , EC2 IAM Role'

# environment type & bash parameters
Parameters:
  ParentStack:
    Type: String
    Description: '(*)Parent VPC Stack Name'
    Default: ''

  EnvType:
    Type: String
    Description: '(*)Environment Type for this Stack.'
    ConstraintDescription: 'must specify prod, stag or dev.'
    Default: 'dev'
    AllowedValues:
      - 'prod'
      - 'stag'
      - 'dev'

  SNSStack:
    Type: String
    Description: 'notification to slack'
    AllowedValues: ['yes', 'no']
    Default: 'no'

  MaxSize:
    Type: String
    Description: '(*)The maximum size of the Auto Scaling group.'
    Default: 5

  MinSize:
    Type: String
    Description: '(*)The minimum size of the Auto Scaling group.'
    Default: 0

  DesiredCapacity:
    Type: String
    Description: '(*)Specifies the desired capacity for the Auto Scaling group.'
    Default: 0

  AMIId:
    Type: String
    Description: '(*)Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.'
    Default: 'ami-3bd3c45c'

  InstanceType:
    Type: String
    Description: '(*)Specifies the instance type of the EC2 instance'
    ConstraintDescription: ''
    Default: 'm3.medium'
    AllowedValues:
      - 't2.micro'
      - 'm4.large'
      - 'm4.xlarge'
      - 'm3.medium'

  ALBStackName:
    Type: String
    Description: 'using Application Load Balancer with ALB Name'
    Default: ''

  CLBStackName:
    Type: String
    Description: 'using Classic Load Balancer with CLB Name'
    Default: ''

  EC2SubnetPosition:
    Type: String
    Description: '(*)web service subnet position'
    Default: 'PrivateSecurityGroup1'
    AllowedValues:
      - 'PrivateSecurityGroup1'
      - 'PrivateSecurityGroup2'

  HealthCheckType:
    Type: String
    Description: '(*)health check source, Amazon EC2 or Elastic Load Balancer'
    Default: 'EC2'
    AllowedValues:
      - 'EC2'
      - 'ELB'

  EC2KeyPair:
    Type: String
    Description: 'The Bastion Server KeyPair'
    Default: ''

  SpotPrice:
    Type: Number
    Description: '(*)0 for On-Demand, else for Spot-Instance'
    Default: '0.013'

Conditions:
  EC2KeyPairCond: !Not [ !Equals [ !Ref EC2KeyPair, '' ] ]
  SpotInstanceCond: !Not [ !Equals [ !Ref SpotPrice, 0 ] ]
  ALBCond: !Not [ !Equals [ !Ref ALBStackName, '' ] ]
  CLBCond: !Not [ !Equals [ !Ref CLBStackName, '' ] ]
  SNSStackCond: !Equals [ !Ref SNSStack, 'yes' ]

##### create resource #####
Resources:
  Asg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: '300'
      HealthCheckGracePeriod: 300
      # ALB or EC2 , start with EC2, be sure to use ELB
      HealthCheckType: !Sub '${HealthCheckType}'
      LaunchConfigurationName: !Ref LaunchConfig
      # LoadBalancerNames for CLB
      LoadBalancerNames:
        !If
        - CLBCond
        -
          - 'Fn::ImportValue': !Sub '${CLBStackName}-${EnvType}-CLB'
        - !Ref 'AWS::NoValue'
      # TargetGroupARNs for ALB
      TargetGroupARNs:
        !If
        - ALBCond
        -
          - 'Fn::ImportValue': !Sub '${ALBStackName}-${EnvType}-ALB-TG'
        - !Ref 'AWS::NoValue'
      MaxSize: !Sub '${MaxSize}'
      MinSize: !Sub '${MinSize}'
      DesiredCapacity: !Sub '${DesiredCapacity}'
      MetricsCollection:
        - Granularity: 1Minute
      NotificationConfigurations:
        !If
        - SNSStackCond
        - - NotificationTypes:
            # - 'autoscaling:EC2_INSTANCE_LAUNCH'
            # - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
            TopicARN:
              'Fn::ImportValue': !Sub '${ParentStack}-${EnvType}-sns2slack'
        - !Ref 'AWS::NoValue'
      # http://docs.aws.amazon.com/autoscaling/latest/userguide/as-instance-termination.html
      TerminationPolicies:
        - 'OldestInstance'
        - 'Default'
      VPCZoneIdentifier:
        - 'Fn::ImportValue': !Sub '${ParentStack}-${EnvType}-PrivateSubnet1A'
        - 'Fn::ImportValue': !Sub '${ParentStack}-${EnvType}-PrivateSubnet1B'
      Tags:
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub '${AWS::StackName}-${EnvType}-Asg'

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: false
      # BlockDeviceMappings:
      #   - DeviceName: '/dev/xvda'
      #     Ebs:
      #       DeleteOnTermination: true
      #       Encrypted: false
      #       VolumeSize: 8
      #       VolumeType: gp2
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Sub '${AMIId}'
      InstanceMonitoring: true
      InstanceType: !Sub '${InstanceType}'
      KeyName: !If [EC2KeyPairCond, !Ref EC2KeyPair, !Ref 'AWS::NoValue']
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ALBStackName}-${EnvType}-${EC2SubnetPosition}'
      SpotPrice: !If [SpotInstanceCond, !Ref SpotPrice, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64': !Sub |
           #!/bin/bash -x
           # system patch
           sudo yum update -y
           # install code deploy agent
           curl -O https://aws-codedeploy-ap-northeast-1.s3.amazonaws.com/latest/install
           chmod +x ./install
           sudo ./install auto
           ##############################################
           ##### install cloudwatch metrics (for memory/disk)
           cd /opt
           # install memory disk metrics util
           sudo yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https -y
           sudo curl -O http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip
           sudo unzip CloudWatchMonitoringScripts-1.2.1.zip
           sudo rm CloudWatchMonitoringScripts-1.2.1.zip
           ### setup memory disk metrics to crontab
           cd /tmp
           crontab -l > mycron
           echo "*/5 * * * * /opt/aws-scripts-mon/mon-put-instance-data.pl --mem-util --mem-used --mem-used-incl-cache-buff --mem-avail --swap-util --disk-path=/ --disk-space-util --disk-space-avail --from-cron" >> mycron
           crontab mycron
           rm mycron
           ##############################################
           ##### install aws logs agent
           cd ~
           curl --silent https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
           chmod +x ./awslogs-agent-setup.py
           sudo ./awslogs-agent-setup.py -n -r $(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep -i region | awk -F\" '{print $4}') -c s3://noah-config/awslogs/example.conf


  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref EC2Role

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      # RoleName: !Sub '${AWS::StackName}-${EnvType}-EC2Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
      Policies:
        -
          PolicyName: !Sub '${AWS::StackName}-${EnvType}-EC2CodeDeploy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                Resource: 'arn:aws:s3:::noah-deploy/*'
              -
                Effect: 'Allow'
                Action:
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'autoscaling:DescribeAutoScalingInstances'
                  - 'autoscaling:SuspendProcesses'
                  - 'autoscaling:UpdateAutoScalingGroup'
                  - 'autoscaling:EnterStandby'
                  - 'autoscaling:ResumeProcesses'
                  - 'autoscaling:ExitStandby'
                Resource: '*'
        -
          PolicyName: !Sub '${AWS::StackName}-${EnvType}-CustomMetrics'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                  - 'ec2:DescribeTags'
                Resource: '*'
        -
          PolicyName: !Sub '${AWS::StackName}-${EnvType}-CloudWatchLogsAgent'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: 'arn:aws:logs:*:*:*'
              -
                Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                Resource: 'arn:aws:s3:::noah-config/*'
                # s3://noah-config/* is the cloudwatch logs agent defualt template


#     "ec2:DescribeInstances",
#     "cloudformation:DescribeStacks",

Outputs:
  AutoScalingGroup:
    Value: !Ref Asg
    Export:
      Name: !Sub '${AWS::StackName}-${EnvType}-ASG'

  EC2Role:
    Value: !Ref EC2Role
    Export:
      Name: !Sub '${AWS::StackName}-${EnvType}-EC2Role'
